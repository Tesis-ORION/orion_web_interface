<div id="starfield" class="absolute inset-0">
  <canvas id="starfield-canvas"></canvas>
</div>

<script is:inline>
  // Función simple de invariant (sin dependencias externas)
  function invariant(condition, message) {
    if (!condition) throw new Error(message);
  }

  const COUNT = 800;
  const SPEED = 0.1;

  class Star {
    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }

    update(width, height, speed) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx) {
      ctx.lineWidth = this.z;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  // Crear las estrellas una sola vez
  const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
  let rafId = 0;
  let resizeObserver;

  function initStarfield() {
    // Cancelar cualquier animación previa
    if (rafId > 0) cancelAnimationFrame(rafId);

    const canvas = document.querySelector("#starfield-canvas");
    invariant(canvas, "canvas should not be null");
    const ctx = canvas.getContext("2d");
    invariant(ctx, "canvas context should not be null");

    const container = document.querySelector("#starfield");
    invariant(container, "container should not be null");

    // Si ya existía un ResizeObserver, desconectarlo para evitar duplicados
    if (resizeObserver) {
      resizeObserver.disconnect();
    }
    resizeObserver = new ResizeObserver(setup);
    resizeObserver.observe(container);

    setup();

    function setup() {
      invariant(ctx, "canvas context should not be null");
      if (rafId > 0) cancelAnimationFrame(rafId);

      const { clientWidth: width, clientHeight: height } = container;
      const dpr = window.devicePixelRatio || 1;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.style.width = `${width}px`;
      canvas.style.height = `${height}px`;

      // Reinicia la transformación del contexto
      if (ctx.resetTransform) {
        ctx.resetTransform();
      } else {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
      }
      ctx.scale(dpr, dpr);

      // Reposicionar las estrellas
      for (const star of stars) {
        star.x = Math.random() * width - width / 2;
        star.y = Math.random() * height - height / 2;
        star.z = 0;
      }

      // Restablecer la transformación para centrar el canvas
      if (ctx.resetTransform) {
        ctx.resetTransform();
      } else {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
      }
      ctx.translate(width / 2, height / 2);

      ctx.fillStyle = "rgba(0, 0, 0, 0.4)";
      ctx.strokeStyle = "white";
      rafId = requestAnimationFrame(frame);
    }

    function frame() {
      invariant(ctx, "canvas context should not be null");
      const { clientWidth: width, clientHeight: height } = container;
      for (const star of stars) {
        star.update(width, height, SPEED);
        star.draw(ctx);
      }
      ctx.fillRect(-width / 2, -height / 2, width, height);
      rafId = requestAnimationFrame(frame);
    }
  }

  // Inicializa el starfield al cargar la página
  initStarfield();

  // Vuelve a inicializar el starfield en cada navegación client-side
  document.addEventListener("astro:page-load", initStarfield);
</script>
